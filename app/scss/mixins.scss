// TO %
// $pxOne - наши пиксели, которые нужно перевести в проценты
// $pxTwo - ширина родителя
@function prc($pxOne, $pxTwo) {
  $result: math.div($pxOne, $pxTwo) * 100%;
  @return $result;
}

@function vw($pxOne, $pxTwo) {
  $result: math.div($pxOne, $pxTwo) * 100vw;
  @return $result;
}

// второе число в параметрах math.div это размер шрифта относительно которого вычисляется rem и em
// REM
@function rem($px) {
  $result: math.div($px, 18) + rem;
  @return $result;
}

// EM
@function em($px) {
  $result: math.div($px, 18) + em;
  @return $result;
}


// Адаптивное свойство

  // $property - свойство размеры которого высчитываем
  // $startSize - начальное макетное значение
  // $minSize - размер на минимальной ширине полотна
  // $type - режим по которому нужно менять размеры свойства

    // значения переменных в variables.scss
  // $maxWidth - ширина полотна
  // $maxWidthContainer - ширина ограничивающего контейнера


@mixin adaptiv-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;
  @if $type==1 {
    // Только если экран меньше контейнера (отзывчивость в пределах контейнера)
    #{$property}: $startSize + px;
    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  } @else if $type==2 {
    // Только если экран больше контейнера (отзывчивость за пределами контейнера)
    #{$property}: $startSize + px;
    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
    }
  } @else {
    // Всегда (отзывчивость по всей ширине без медиа-запросов)
    #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
  }
}

@mixin adaptiv-valueTablet($property, $startSize, $minSize) {
  $addSize: $startSize - $minSize;
  #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 1023px) / #{$maxWidth - 1023}));
}

@mixin adaptiv-valueMobile($property, $startSize, $minSize) {
  $addSize: $startSize - $minSize;
  #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 767px) / #{$maxWidth - 767}));
}

// Адаптивный шрифт

@mixin adaptiv-font($pcSize, $mobSize) {
  $addSize: $pcSize - $mobSize;
  $addMobSize: $addSize + $addSize * 0.7;
  @media (max-width: 767px) {
    font-size: calc(#{$mobSize + px} + #{$addMobSize} * ((100vw - 320px) / #{$maxWidth}));
  }
  @media (min-width: 767px) {
    font-size: calc(#{$mobSize + px} + #{$addSize} * (100vw / #{$maxWidth}));
  }
}

// Ограничивающий контейнер

@mixin container($width-screen) {
  max-width: $width-screen;
  margin: 0 auto;
  padding: 0 15px;
}

@mixin centering-flex($flex-direction) {
  display: flex;
  flex-direction: $flex-direction;
  justify-content: center;
  align-items: center;
}





